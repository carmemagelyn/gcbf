{
  "version": 3,
  "sources": ["../../../functions/api/%5B%5Bpath%5D%5D.js", "../../../worker.js"],
  "sourceRoot": "/Users/digihwycarme/Applications/gcbf/.wrangler/tmp/deploy-cyvxsU",
  "sourcesContent": ["// Cloudflare Pages API - Main Router\n// This handles all API requests for the GCBF Church Management System\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n\nexport async function onRequest(context) {\n  const { request, env } = context\n  const url = new URL(request.url)\n  const path = url.pathname.replace('/api/', '')\n\n  // Handle CORS preflight\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders })\n  }\n\n  try {\n    // Route to appropriate handler\n    if (path.startsWith('auth/')) {\n      return handleAuth(request, env, path)\n    }\n    if (path.startsWith('prayers')) {\n      return handlePrayers(request, env, path)\n    }\n    if (path.startsWith('newsletters')) {\n      return handleNewsletters(request, env, path)\n    }\n    if (path.startsWith('receipts')) {\n      return handleReceipts(request, env, path)\n    }\n    if (path.startsWith('ministries')) {\n      return handleMinistries(request, env, path)\n    }\n    if (path.startsWith('finances')) {\n      return handleFinances(request, env, path)\n    }\n    if (path.startsWith('pledges')) {\n      return handlePledges(request, env, path)\n    }\n    if (path.startsWith('bible-reading')) {\n      return handleBibleReading(request, env, path)\n    }\n\n    return jsonResponse({ error: 'Not Found' }, 404)\n  } catch (error) {\n    console.error('API Error:', error)\n    return jsonResponse({ error: error.message }, 500)\n  }\n}\n\n// Helper function for JSON responses\nfunction jsonResponse(data, status = 200) {\n  return new Response(JSON.stringify(data), {\n    status,\n    headers: {\n      ...corsHeaders,\n      'Content-Type': 'application/json',\n    },\n  })\n}\n\n// Authentication handlers\nasync function handleAuth(request, env, path) {\n  const { DB } = env\n\n  if (path === 'auth/login') {\n    const { email, password } = await request.json()\n    \n    const user = await DB.prepare(`\n      SELECT id, email, name, userType, joinDate \n      FROM users \n      WHERE email = ? AND password = ?\n    `).bind(email, password).first()\n\n    if (user) {\n      return jsonResponse({ success: true, user })\n    }\n    return jsonResponse({ success: false, message: 'Invalid credentials' }, 401)\n  }\n\n  if (path === 'auth/register' && request.method === 'POST') {\n    const userData = await request.json()\n    \n    try {\n      const result = await DB.prepare(`\n        INSERT INTO users (email, password, name, userType, phone, joinDate)\n        VALUES (?, ?, ?, ?, ?, ?)\n      `).bind(\n        userData.email,\n        userData.password,\n        userData.name,\n        userData.userType || 'member',\n        userData.phone || null,\n        new Date().toISOString().split('T')[0]\n      ).run()\n\n      const user = await DB.prepare(`\n        SELECT id, email, name, userType, joinDate FROM users WHERE id = ?\n      `).bind(result.meta.last_row_id).first()\n\n      return jsonResponse({ success: true, user })\n    } catch (error) {\n      return jsonResponse({ success: false, message: 'Email already exists' }, 400)\n    }\n  }\n\n  return jsonResponse({ error: 'Invalid auth endpoint' }, 404)\n}\n\n// Prayer handlers\nasync function handlePrayers(request, env, path) {\n  const { DB } = env\n\n  if (request.method === 'GET') {\n    const url = new URL(request.url)\n    const userId = url.searchParams.get('userId')\n    const visibility = url.searchParams.get('visibility')\n\n    let query = `\n      SELECT p.*, u.name as requestedBy\n      FROM prayers p\n      JOIN users u ON p.userId = u.id\n      WHERE 1=1\n    `\n    const bindings = []\n\n    if (userId) {\n      query += ` AND p.userId = ?`\n      bindings.push(userId)\n    }\n\n    if (visibility) {\n      query += ` AND p.visibility = ?`\n      bindings.push(visibility)\n    } else {\n      query += ` AND p.visibility IN ('public', 'pastor')`\n    }\n\n    query += ` ORDER BY p.createdAt DESC`\n\n    const { results } = await DB.prepare(query).bind(...bindings).all()\n    return jsonResponse(results)\n  }\n\n  if (request.method === 'POST') {\n    const data = await request.json()\n    \n    const result = await DB.prepare(`\n      INSERT INTO prayers (userId, category, title, request, visibility, dateRequested, approved, approvedBy, approvedAt)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.userId,\n      data.category,\n      data.title,\n      data.request,\n      data.visibility,\n      data.dateRequested,\n      data.approved ? 1 : 0,\n      data.approvedBy || null,\n      data.approvedAt || null\n    ).run()\n\n    return jsonResponse({ id: result.meta.last_row_id, success: true })\n  }\n\n  if (request.method === 'PUT') {\n    const data = await request.json()\n    const prayerId = path.split('/')[1]\n\n    await DB.prepare(`\n      UPDATE prayers \n      SET status = ?, dateAnswered = ?, prayerCount = ?, approved = ?, approvedBy = ?, approvedAt = ?\n      WHERE id = ?\n    `).bind(\n      data.status,\n      data.dateAnswered || null,\n      data.prayerCount || 0,\n      data.approved ? 1 : 0,\n      data.approvedBy || null,\n      data.approvedAt || null,\n      prayerId\n    ).run()\n\n    return jsonResponse({ success: true })\n  }\n\n  if (request.method === 'DELETE') {\n    const prayerId = path.split('/')[1]\n    await DB.prepare(`DELETE FROM prayers WHERE id = ?`).bind(prayerId).run()\n    return jsonResponse({ success: true })\n  }\n\n  return jsonResponse({ error: 'Method not allowed' }, 405)\n}\n\n// Newsletter handlers\nasync function handleNewsletters(request, env, path) {\n  const { DB, STORAGE } = env\n\n  // Handle file upload to R2\n  if (path === 'newsletters/upload' && request.method === 'POST') {\n    try {\n      const formData = await request.formData()\n      const pdfFile = formData.get('pdf')\n      const coverFile = formData.get('cover')\n      const pdfFileName = formData.get('pdfFileName')\n      const coverFileName = formData.get('coverFileName')\n\n      if (!pdfFile || !pdfFileName) {\n        return jsonResponse({ error: 'PDF file and filename required' }, 400)\n      }\n\n      // Upload PDF to R2\n      const pdfBuffer = await pdfFile.arrayBuffer()\n      await STORAGE.put(`newsletters/${pdfFileName}`, pdfBuffer, {\n        httpMetadata: {\n          contentType: 'application/pdf'\n        }\n      })\n\n      let coverUrl = null\n      // Upload cover if provided\n      if (coverFile && coverFileName) {\n        const coverBuffer = await coverFile.arrayBuffer()\n        await STORAGE.put(`newsletters/${coverFileName}`, coverBuffer, {\n          httpMetadata: {\n            contentType: 'image/jpeg'\n          }\n        })\n        coverUrl = `/r2/newsletters/${coverFileName}`\n      }\n\n      return jsonResponse({\n        success: true,\n        pdfUrl: `/r2/newsletters/${pdfFileName}`,\n        coverUrl\n      })\n    } catch (error) {\n      console.error('Upload error:', error)\n      return jsonResponse({ error: 'Upload failed: ' + error.message }, 500)\n    }\n  }\n\n  if (request.method === 'GET') {\n    const { results } = await DB.prepare(`\n      SELECT * FROM newsletters ORDER BY date DESC LIMIT 10\n    `).all()\n\n    // Parse highlights JSON\n    const newsletters = results.map(n => ({\n      ...n,\n      highlights: n.highlights ? JSON.parse(n.highlights) : []\n    }))\n\n    return jsonResponse(newsletters)\n  }\n\n  if (request.method === 'POST') {\n    const data = await request.json()\n    \n    const result = await DB.prepare(`\n      INSERT INTO newsletters (title, date, excerpt, issueNumber, volume, publishedBy, coverImage, downloadUrl, highlights)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.title,\n      data.date,\n      data.excerpt,\n      data.issueNumber,\n      data.volume || 1,\n      data.publishedBy,\n      data.coverImage || null,\n      data.downloadUrl,\n      JSON.stringify(data.highlights || [])\n    ).run()\n\n    return jsonResponse({ id: result.meta.last_row_id, success: true })\n  }\n\n  if (request.method === 'DELETE') {\n    const newsletterId = path.split('/')[1]\n    \n    // Get newsletter info to delete files from R2\n    const newsletter = await DB.prepare(`\n      SELECT downloadUrl, coverImage FROM newsletters WHERE id = ?\n    `).bind(newsletterId).first()\n    \n    if (newsletter && STORAGE) {\n      // Delete files from R2\n      if (newsletter.downloadUrl && newsletter.downloadUrl.startsWith('/r2/')) {\n        const pdfKey = newsletter.downloadUrl.replace('/r2/', '')\n        try {\n          await STORAGE.delete(pdfKey)\n        } catch (error) {\n          console.error('Error deleting PDF from R2:', error)\n        }\n      }\n      \n      if (newsletter.coverImage && newsletter.coverImage.startsWith('/r2/')) {\n        const coverKey = newsletter.coverImage.replace('/r2/', '')\n        try {\n          await STORAGE.delete(coverKey)\n        } catch (error) {\n          console.error('Error deleting cover from R2:', error)\n        }\n      }\n    }\n    \n    await DB.prepare(`DELETE FROM newsletters WHERE id = ?`).bind(newsletterId).run()\n    return jsonResponse({ success: true })\n  }\n\n  return jsonResponse({ error: 'Method not allowed' }, 405)\n}\n\n// Receipt upload handler\nasync function handleReceipts(request, env, path) {\n  const { STORAGE } = env\n\n  // Handle receipt upload to R2\n  if (path === 'receipts/upload' && request.method === 'POST') {\n    try {\n      const formData = await request.formData()\n      const receiptFile = formData.get('receipt')\n      const fileName = formData.get('fileName')\n      const userId = formData.get('userId')\n      const giftId = formData.get('giftId')\n      const paymentId = formData.get('paymentId')\n\n      if (!receiptFile || !fileName) {\n        return jsonResponse({ error: 'Receipt file and filename required' }, 400)\n      }\n\n      // Upload receipt to R2\n      const receiptBuffer = await receiptFile.arrayBuffer()\n      const receiptKey = `receipts/${fileName}`\n      \n      await STORAGE.put(receiptKey, receiptBuffer, {\n        httpMetadata: {\n          contentType: receiptFile.type || 'application/octet-stream'\n        },\n        customMetadata: {\n          userId: userId || 'unknown',\n          giftId: giftId || '',\n          paymentId: paymentId || '',\n          uploadDate: new Date().toISOString()\n        }\n      })\n\n      return jsonResponse({\n        success: true,\n        receiptUrl: `/r2/${receiptKey}`,\n        fileName: fileName\n      })\n    } catch (error) {\n      console.error('Receipt upload error:', error)\n      return jsonResponse({ error: 'Upload failed: ' + error.message }, 500)\n    }\n  }\n\n  // Get receipt (redirect to R2 URL)\n  if (request.method === 'GET' && path.startsWith('receipts/')) {\n    const fileName = path.replace('receipts/', '')\n    return jsonResponse({ receiptUrl: `/r2/receipts/${fileName}` })\n  }\n\n  return jsonResponse({ error: 'Method not allowed' }, 405)\n}\n\n// Ministry handlers\nasync function handleMinistries(request, env, path) {\n  const { DB } = env\n\n  if (request.method === 'GET') {\n    const { results } = await DB.prepare(`\n      SELECT m.*, \n        (SELECT COUNT(*) FROM attendance a WHERE a.ministryId = m.id) as attendanceCount\n      FROM ministry_reports m\n      WHERE m.active = 1\n      ORDER BY m.name\n    `).all()\n\n    return jsonResponse(results)\n  }\n\n  if (request.method === 'POST' && path === 'ministries') {\n    const data = await request.json()\n    \n    const result = await DB.prepare(`\n      INSERT INTO ministry_reports (name, leader, budget, spent, participants, description, notes)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.name,\n      data.leader || null,\n      data.budget || 0,\n      data.spent || 0,\n      data.participants || 0,\n      data.description || null,\n      data.notes || null\n    ).run()\n\n    return jsonResponse({ id: result.meta.last_row_id, success: true })\n  }\n\n  if (path.startsWith('ministries/') && path.includes('/attendance')) {\n    if (request.method === 'POST') {\n      const data = await request.json()\n      const ministryId = path.split('/')[1]\n      \n      const result = await DB.prepare(`\n        INSERT INTO attendance (ministryId, date, count, notes, recordedBy)\n        VALUES (?, ?, ?, ?, ?)\n      `).bind(\n        ministryId,\n        data.date,\n        data.count,\n        data.notes || null,\n        data.recordedBy\n      ).run()\n\n      return jsonResponse({ id: result.meta.last_row_id, success: true })\n    }\n\n    if (request.method === 'GET') {\n      const ministryId = path.split('/')[1]\n      const { results } = await DB.prepare(`\n        SELECT * FROM attendance WHERE ministryId = ? ORDER BY date DESC\n      `).bind(ministryId).all()\n\n      return jsonResponse(results)\n    }\n  }\n\n  return jsonResponse({ error: 'Method not allowed' }, 405)\n}\n\n// Finance handlers\nasync function handleFinances(request, env, path) {\n  const { DB } = env\n\n  if (path === 'finances/income') {\n    if (request.method === 'GET') {\n      const { results } = await DB.prepare(`\n        SELECT * FROM income ORDER BY date DESC\n      `).all()\n      return jsonResponse(results)\n    }\n\n    if (request.method === 'POST') {\n      const data = await request.json()\n      const result = await DB.prepare(`\n        INSERT INTO income (date, category, amount, source, description, notes, recordedBy)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n      `).bind(\n        data.date,\n        data.category,\n        data.amount,\n        data.source || null,\n        data.description || null,\n        data.notes || null,\n        data.recordedBy\n      ).run()\n\n      return jsonResponse({ id: result.meta.last_row_id, success: true })\n    }\n  }\n\n  if (path === 'finances/expenses') {\n    if (request.method === 'GET') {\n      const { results } = await DB.prepare(`\n        SELECT * FROM expenses ORDER BY date DESC\n      `).all()\n      return jsonResponse(results)\n    }\n\n    if (request.method === 'POST') {\n      const data = await request.json()\n      const result = await DB.prepare(`\n        INSERT INTO expenses (date, category, amount, description, notes, recordedBy, approved, approvedBy)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      `).bind(\n        data.date,\n        data.category,\n        data.amount,\n        data.description || null,\n        data.notes || null,\n        data.recordedBy,\n        data.approved ? 1 : 0,\n        data.approvedBy || null\n      ).run()\n\n      return jsonResponse({ id: result.meta.last_row_id, success: true })\n    }\n  }\n\n  return jsonResponse({ error: 'Invalid finance endpoint' }, 404)\n}\n\n// Pledge handlers\nasync function handlePledges(request, env, path) {\n  const { DB } = env\n\n  if (request.method === 'GET') {\n    const url = new URL(request.url)\n    const userId = url.searchParams.get('userId')\n\n    const { results } = await DB.prepare(`\n      SELECT p.*, u.name as userName\n      FROM pledges p\n      JOIN users u ON p.userId = u.id\n      ${userId ? 'WHERE p.userId = ?' : ''}\n      ORDER BY p.createdAt DESC\n    `).bind(userId ? userId : undefined).all()\n\n    return jsonResponse(results)\n  }\n\n  if (request.method === 'POST') {\n    const data = await request.json()\n    \n    const result = await DB.prepare(`\n      INSERT INTO pledges (userId, amount, frequency, startDate, endDate, status, notes)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.userId,\n      data.amount,\n      data.frequency,\n      data.startDate,\n      data.endDate || null,\n      data.status || 'active',\n      data.notes || null\n    ).run()\n\n    return jsonResponse({ id: result.meta.last_row_id, success: true })\n  }\n\n  return jsonResponse({ error: 'Method not allowed' }, 405)\n}\n\n// Bible Reading handlers\nasync function handleBibleReading(request, env, path) {\n  const { DB } = env\n\n  if (request.method === 'GET') {\n    const url = new URL(request.url)\n    const userId = url.searchParams.get('userId')\n\n    const { results } = await DB.prepare(`\n      SELECT * FROM bible_reading \n      WHERE userId = ? \n      ORDER BY date DESC\n    `).bind(userId).all()\n\n    return jsonResponse(results)\n  }\n\n  if (request.method === 'POST') {\n    const data = await request.json()\n    \n    const result = await DB.prepare(`\n      INSERT INTO bible_reading (userId, date, book, chapter, notes, completed)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `).bind(\n      data.userId,\n      data.date,\n      data.book,\n      data.chapter,\n      data.notes || null,\n      data.completed ? 1 : 0\n    ).run()\n\n    return jsonResponse({ id: result.meta.last_row_id, success: true })\n  }\n\n  return jsonResponse({ error: 'Method not allowed' }, 405)\n}\n", "// Cloudflare Worker for GCBF Church App with Assets\n// Handles API routing and serves static assets from dist folder\n\n// Import API handlers from the functions directory\nimport { onRequest as apiHandler } from './functions/api/[[path]].js';\n\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      const url = new URL(request.url);\n      \n      // Handle API requests first\n      if (url.pathname.startsWith('/api/')) {\n        return await apiHandler({ request, env, ctx });\n      }\n      \n      // Handle R2 file requests\n      if (url.pathname.startsWith('/r2/')) {\n        try {\n          const key = url.pathname.replace('/r2/', '');\n          const object = await env.STORAGE.get(key);\n          \n          if (object === null) {\n            return new Response('File not found', { status: 404 });\n          }\n          \n          const headers = new Headers();\n          object.writeHttpMetadata(headers);\n          headers.set('etag', object.httpEtag);\n          headers.set('cache-control', 'public, max-age=31536000');\n          \n          return new Response(object.body, { headers });\n        } catch (r2Error) {\n          console.error('R2 fetch error:', r2Error);\n          return new Response('File not found', { status: 404 });\n        }\n      }\n      \n      // For Workers with Assets, ASSETS is automatically provided\n      // Serve static assets from the configured assets directory\n      try {\n        const asset = await env.ASSETS.fetch(request);\n        \n        // If asset found, return it\n        if (asset && asset.status !== 404) {\n          return asset;\n        }\n      } catch (assetError) {\n        console.error('Asset fetch error:', assetError);\n        // Continue to fallback if asset fetch fails\n      }\n      \n      // For 404s or errors, serve index.html for SPA routing\n      // This allows Vue Router to handle client-side routing\n      try {\n        const indexUrl = new URL('/', url.origin);\n        const indexRequest = new Request(indexUrl, request);\n        return await env.ASSETS.fetch(indexRequest);\n      } catch (indexError) {\n        console.error('Index fetch error:', indexError);\n        return new Response('Not Found', { \n          status: 404,\n          headers: { 'Content-Type': 'text/plain' }\n        });\n      }\n    } catch (error) {\n      // Log error and return a generic error response\n      console.error('Worker error:', error);\n      return new Response('Internal Server Error: ' + error.message + '\\nStack: ' + error.stack, { \n        status: 500,\n        headers: { 'Content-Type': 'text/plain' }\n      });\n    }\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
