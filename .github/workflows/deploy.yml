name: Deploy to Cloudflare Pages

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci

      - name: Build
        run: |
          npm run build

      - name: Install Wrangler
        run: |
          npm install -g wrangler@4

      - name: Authenticate Wrangler
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          wrangler login --api-token $CF_API_TOKEN || true

      - name: Publish Pages (dist)
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CF_PAGES_PROJECT: ${{ secrets.CF_PAGES_PROJECT }}
        run: |
          # Use the project name passed in secrets to ensure correctness in multi-project accounts
          wrangler pages publish dist --project-name "$CF_PAGES_PROJECT" --branch main

      - name: Optionally import D1 schema
        if: secrets.CF_D1_DATABASE_ID != ''
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_D1_DATABASE_ID: ${{ secrets.CF_D1_DATABASE_ID }}
        run: |
          # Execute the schema.sql against the D1 database bound to the account
          # The `wrangler d1 execute` command expects a database name; when using D1 in Pages projects
          # and binding via `wrangler.toml`, the CI should have the database id in CF_D1_DATABASE_ID.
          # Ensure `schema.sql` is present at repo root.
          wrangler d1 execute "$CF_D1_DATABASE_ID" --file=./schema.sql || true

      - name: Done
        run: echo "Pages published. If D1 schema import was requested, it ran (or was skipped)."
